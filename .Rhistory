renv::init()
usethis::use_package(package = "renv", type = "Suggests")
install.packages("usethis")
usethis::use_package(package = "renv", type = "Suggests")
usethis::use_readme_rmd()
devtools::document()
install.packages("htmlwidgets")
devtools::document()
rlang::last_error()
devtools::document()
rlang::last_error()
install.packages(sparcl)
install.packages("sparcl")
devtools::document()
rlang::last_error()
devtools::document()
warnings()
install.packages("styler")
styler::style_pkg()
usethis::use_mit_license()
usethis::use_version()
devtools::check()
devtools::check()
warnings()
usethis::use_tidy_github_actions()
usethis::use_tidy_github_actions()
devtools::build_rmd()
devtools::build_rmd()
devtools::build_rmd()
devtools::build_rmd()
devtools::build_rmd()
devtools::check()
devtools::build_rmd()
usethis::use_tidy_github_actions()
devtools::build_rmd()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
# install.packages("devtools")
devtools::install_github("candsj/weightedCC")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::install_github("candsj/weightedCC")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(VignetteBuilder)
install.packages(VignetteBuilder)
install.packages("VignetteBuilder")
library(knitr)
devtools::check()
devtools::install_github("candsj/weightedCC")
usethis::use_tidy_github_actions()
devtools::build_rmd()
devtools::check()
usethis::use_tidy_github_actions()
devtools::install_github("candsj/weightedCC")
renv::snapshot()
load("/Users/candsj/Documents/Research/Project/ADEPT/results/Elasticnet_110522.Rdata")
Result_broad[[3]]
devtools::check()
devtools::install_github("candsj/weightedCC")
devtools::install_github("candsj/weightedCC")
library(weightedCC)
remove.packages("weightedCC", lib="~/Library/Caches/org.R-project.R/R/renv/library/weightedCC-10e30e8f/R-4.2/aarch64-apple-darwin20")
library(weightedCC)
devtools::install_github("candsj/weightedCC")
devtools::install_github("candsj/weightedCC")
remove.packages("weightedCC", lib="~/Library/Caches/org.R-project.R/R/renv/library/weightedCC-10e30e8f/R-4.2/aarch64-apple-darwin20")
devtools::install_github("candsj/weightedCC")
devtools::check()
rlang::last_error()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(sparcl)
library(knitr)
#load Cibersort results
load("/Users/candsj/Documents/Research/Project/ADEPT/results/Elasticnet500_111622.Rdata")
load("/Users/candsj/Documents/Research/Project/ADEPT/data/ADEPT_092822.Rdata")
gene.names=annotation$Gene_name[keep]
devtools::check()
devtools::check()
devtools::check()
simulation=data_generation(20,5,30)
wcc <- WeightedConsensusCluster(simulation, method="one layer", individualK = rep(3,4),
globalK = 3, pFeature = 0.8 ,ccClMethods = "k-means",
ccDistHCs = "euclidean",hclustMethod = "average",finalclmethod="hclust",
finalhclustMethod = "average",Silhouette=TRUE)
rep(3,4)
data=data_generation(20,5,30)
N <- dim(data[[1]])[1]
M <- length(data)
method="one layer"
individualK = rep(3,4)
globalK = 3
pFeature = 0.8
ccClMethods = "k-means"
ccDistHCs = "euclidean"
hclustMethod = "average"
finalclmethod="hclust"
finalhclustMethod = "average"
Silhouette=TRUE
for (i in 1:M) {
if (dim(data[[i]])[1] != N) {
stop("All datasets must have the same number of rows.")
}
}
if (is.null(method)) stop("method should be provided")
method <- match.arg(method, c("one layer", "two-layer"))
res.all <- list()
output <- list()
output$bestK <- rep(NA, M)
CM <- array(NA, c(N, N, M))
f (method == "one layer") {
if (method == "one layer") {
if (length(ccClMethods) == 1) {
ccClMethods <- rep(ccClMethods, M)
} else if (length(ccClMethods) != M) {
stop("Please specify a method for each dataset by passing a vector of length", M, "to ccClMethods.")
}
}
if (length(individualK) == 1) {
individualK <- rep(individualK, M)
} else {
(length(individualK) != M)
}
{
stop("Please specify the cluster number for each dataset by passing a vector of length", M, "to individualK.")
}
if (length(individualK) == 1) {
individualK <- rep(individualK, M)
} else if (length(individualK) != M)
{
stop("Please specify the cluster number for each dataset by passing a vector of length", M, "to individualK.")
}
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
n1=20
n2=20
n3=20
n = n1+n2+n3
p=30
p1 =5
p2 = 5
p3 = 5
true.class=c(rep(1,n1),rep(2,n2),rep(3,n3))
exampleData=alist()
################# normal distribution ####################
set.seed(1)
c1=matrix(rnorm(n1*p1,mean=2.2,sd=1.7), ncol=p1,nrow=n1)
set.seed(2)
c2=matrix(rnorm(n2*p2,mean=1.6, sd=1.7), ncol=p2,nrow=n2)
set.seed(3)
c3=matrix(rnorm(n3*p3,mean=1, sd=1.7), ncol=p3,nrow=n3)
set.seed(4)
normData = matrix(rnorm(n*p, mean=0, sd=1.7),nrow=n, ncol=p)
normData[1:n1,1:p1]= c1
normData[(n1+1):(n1+n2),(p1+1):(p1+p2)]= c2
normData[(n1+n2+1):n,(p1+p2+1):(p1+p2+p3)]= c3
######## binomial data #########################
set.seed(1)
c1=matrix(rbinom(n1*p1,size=1, prob=0.54), ncol=p1,nrow=n1)
set.seed(2)
c2=matrix(rbinom(n2*p2,size=1, prob=0.42), ncol=p2,nrow=n2)
set.seed(3)
c3=matrix(rbinom(n3*p3,size=1, prob=0.3), ncol=p3,nrow=n3)
set.seed(4)
binomData = matrix(rbinom(n*p, size=1, prob=0.1),nrow=n, ncol=p)
binomData[1:n1,1:p1]= c1
binomData[(n1+1):(n1+n2),(p1+1):(p1+p2)]= c2
binomData[(n1+n2+1):n,(p1+p2+1):(p1+p2+p3)]= c3
######### poisson data ############################
set.seed(1)
c1=matrix(rpois(n1*p1,lambda=1.9), ncol=p1,nrow=n1)
set.seed(2)
c2=matrix(rpois(n2*p2,lambda=1.5), ncol=p2,nrow=n2)
set.seed(3)
c3=matrix(rpois(n3*p3,lambda=1), ncol=p3,nrow=n3)
set.seed(4)
poisData = matrix(rpois(n*p, lambda=0.6),nrow=n, ncol=p)
poisData[1:n1,1:p1]= c1
poisData[(n1+1):(n1+n2),(p1+1):(p1+p2)]= c2
poisData[(n1+n2+1):n,(p1+p2+1):(p1+p2+p3)]= c3
################## multinomial distribution ##############
set.seed(1)
c1=matrix(sample(1:3,size=n1*p1, replace=TRUE, prob=c(0.8,0.15,0.05)), ncol=p1,nrow=n1)
set.seed(2)
c2=matrix(sample(1:3,size=n2*p2, replace=TRUE, prob=c(0.3,0.4,0.3)), ncol=p2,nrow=n2)
set.seed(3)
c3=matrix(sample(1:3,size=n3*p3, replace=TRUE, prob=c(0.05,0.15,0.8)), ncol=p3,nrow=n3)
set.seed(4)
multData = matrix(sample(1:3,size=n*p, replace=TRUE, prob=c(0.33,0.33,0.33)),nrow=n, ncol=p)
multData[1:n1,1:p1]= c1
multData[(n1+1):(n1+n2),(p1+1):(p1+p2)]= c2
multData[(n1+n2+1):n,(p1+p2+1):(p1+p2+p3)]= c3
#biID = seq(1,p,2)
#multData[,biID] = binomData[,biID]
### some variables only have one category; need to remove these variables
ncat = function(x){length(unique(x))}
len = apply(binomData,2,ncat)
unicat = which(len==1)
if (length(unicat)>0) {
binomData = binomData[,-unicat]
}
exampleData[[1]]=normData
exampleData[[2]]=binomData
exampleData[[3]]=poisData
exampleData[[4]]=multData
save(exampleData,file="inst/extdata/exampleData.RData")
system.file("extdata", "exampleData.RData", package = "weightedCC")
load(system.file("extdata", "exampleData.RData", package = "weightedCC"))
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
load(system.file("extdata", "exampleData.RData", package = "weightedCC"))
library(weightedCC")
)
)))
qqq
renv::status()
renv::snapshot()
# install.packages("devtools")
devtools::install_github("candsj/weightedCC")
devtools::install_github("candsj/weightedCC")
install.packages("devtools")
# install.packages("devtools")
devtools::install_github("candsj/weightedCC")
load(system.file("extdata", "exampleData.RData", package = "weightedCC"))
normData=exampleData[[1]]
binomData=exampleData[[2]]
poisData=exampleData[[3]]
multData=exampleData[[4]]
lopoisData=log(poisData+1)
normRes=consensuscluster(normData,K=3,B=1000,pItem = 0.8,pFeature = 0.8 ,clMethod ="kmeans",finalclmethod="pam")
library(weightedCC")
""
library("weightedCC")
normRes=consensuscluster(normData,K=3,B=1000,pItem = 0.8,pFeature = 0.8 ,clMethod ="kmeans",finalclmethod="pam")
normRes$class
normRes$consensusMatrix
renv::restore()
git commit --no-verify
git commit --no-verify
devtools::build_readme()
install.packages("devtools")
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
usethis::use_readme_rmd()
devtools::build_readme()
file.remove(".git/hooks/pre-commit")
